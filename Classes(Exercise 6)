class Patron(object):
    """This class represents a patron
    with a name and a number of books checked out."""

    MAX_BOOKS_OUT = 3
        
    def __init__(self, name):
        self._name = name
        self._numBooksOut = 0

    def __str__(self):
        result = self._name + ', ' + str(self._numBooksOut) + \
                 " books out"
        return result

    def getNumBooksOut(self):
        """Returns the number of books out."""
        return self._numBooksOut

    def inc(self):
        """Increments the number of books out."""
        self._numBooksOut += 1

    def dec(self):
        """Decrements the number of books out."""
        self._numBooksOut -= 1

        
class Book(object):
    """This class represents a book with a title, author,
    a patron to whom the book is check out, and a wait list
    of patrons for it."""

    def __init__(self, title, author):
        """Creates a new book with the given title and author."""
        self._title = title
        self._author = author
        self._patron = None
        self._waitList = []

    def __str__(self):
        result =  'Title:  ' + self._title + '\n' 
        result += 'Author: ' + self._author + '\n'
        if self._patron:
            result += "Checked out to: " + str(self._patron) + '\n'
        else:
            result += "Not checked out\n"
        result += "Wait list:\n"
        for patron in self._waitList:
            result += str(patron) + '\n'
        return result

    def borrowMe(self, patron):
        """Attempts to loan book to patron."""
        if len(self._waitList) > 0:
            self._waitList.append(patron)
            return "You have been added to the wait list for this book."
        elif self._patron:
            return "Sorry, this book is currently checked out."
        elif patron.getNumBooksOut() >= Patron.MAX_BOOKS_OUT:
            return "Sorry, you have already checked out the maximum number of books."
        else:
            self._patron = patron
            patron.inc()
            return "You have successfully borrowed this book."

    def returnMe(self):
        """Current patron returns book, attempts to loan it
        to a qualified waiting patron."""
        if not self._patron:
            return "This book is not checked out."
        else:
            self._patron.dec()
            if len(self._waitList) > 0:
                self._patron = self._waitList.pop(0)
                self._patron.inc()
                return "Book returned and loaned to the first patron on the wait list."
            else:
                self._patron = None
                return "Book returned."


